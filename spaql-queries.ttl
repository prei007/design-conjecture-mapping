#### SPARQ Queries for conjecture mapping

PREFIX owl: <http://www.w3.org/2002/07/owl#> 
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
PREFIX xml: <http://www.w3.org/XML/1998/namespace> 
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> 
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>  
# targ must be in because we mix two ontologies! 
PREFIX targ: <http://www.coolfutures.net/rdf/Design_Conjectures/toulminarg#>
PREFIX : <http://coolfutures.net/rdf/Design_Conjectures/dcon#>


## All conjectures in this (the default) graph

Select ?s ?conjecture
where
{
    ?s :hasConjecture ?conjecture . 
}


# with claim text

Select ?s ?conjecture ?text
where
{
    ?s :hasConjecture ?conjecture . 
    ?conjecture targ:hasClaim ?claim . 
    OPTIONAL {?claim targ:text ?text . }
}

Select ?challenge ?cmap ?text
where
{
    ?challenge a :InstructionalChallenge . 
    ?cmap :respondsTo ?challenge . 
    OPTIONAL {?cmap :cmText ?text . }
}

###  Answering the competence questions

## Q1: What solutions for instructional and research challenges? 

# Version 1: no reasoner 
Select ?challenge ?cmap 
where {
{
    ?challenge a :InstructionalChallenge  . 
    ?cmap :respondsTo ?challenge . 
}

UNION
{
    ?challenge a :ResearchChallenge  . 
    ?cmap :respondsTo ?challenge .
}
}

# Version 2: with reasoner (much more elegant!)
# in a triple store with RDFS+ on, this should be possible without
# the first pattern. 

Select ?challenge ?challengeType ?cmap 
where 
{
    ?challengeType rdfs:subClassOf :Challenge . 
    ?challenge a ?challengeType  . 
    ?cmap :respondsTo ?challenge . 
}

## Q2: How have conjectures and designs been refined over time? 

# This calls for a property path query (the +)

Select ?oldversion ?newversion

where 
{
    ?oldversion :refinedVersion+ ?newversion
}

## Q3: where are contributions most needed? 

# Sum over unsupported conjectures in maps and list by frequency, from highest to lowest. 

# first let's get the values of beliefStatus. 

Select ?conjecture ?status 
where 
{
    ?conjecture targ:beliefStatus ?status .
 }
 
# How do we find all conjectures of a cmap?
# We need to go backwards, starting with the outcome 

Select ?cmap ?designelem ?conjecture3 ?conjecture2 ?conjecture1 
where 
{
  ?medproc :hasOutcome ?outcome . 
  ?medproc :hasConjecture ?conjecture1 .
  ?designelem :triggersProcess ?medproc . 
  ?designelem :hasConjecture ?conjecture2 . 
  ?cmap :hasDesignElement ?designelem . 
  ?cmap :hasConjecture ?conjecture3 . 
 }
 ORDER BY ?cmap
 
# Now the beliefStatus
# This returns "paths" of beliefStatus values and the cmap name. 

Select ?cmap ?designelem ?b3 ?b2 ?b1 
where 
{
  ?medproc :hasOutcome ?outcome . 
  ?medproc :hasConjecture ?conjecture1 .
  ?conjecture1 targ:beliefStatus ?b1 .
  ?designelem :triggersProcess ?medproc . 
  ?designelem :hasConjecture ?conjecture2 .  
  ?conjecture2 targ:beliefStatus ?b2 .
  ?cmap :hasDesignElement ?designelem . 
  ?cmap :hasConjecture ?conjecture3 . 
  ?conjecture3 targ:beliefStatus ?b3 .
 }
 ORDER BY ?cmap
 
 # It would be best to get counts first. 
 
# First step: put data into Long format:
 
 

CONSTRUCT  {
	?cmap ?conjecture1 ?b1 . 
	?cmap ?conjecture2 ?b2 .
	?cmap ?conjecture3 ?b3 .
}

where 
{
  ?medproc :hasOutcome ?outcome . 
  ?medproc :hasConjecture ?conjecture1 .
  ?conjecture1 targ:beliefStatus ?b1 .
  ?designelem :triggersProcess ?medproc . 
  ?designelem :hasConjecture ?conjecture2 .  
  ?conjecture2 targ:beliefStatus ?b2 .
  ?cmap :hasDesignElement ?designelem . 
  ?cmap :hasConjecture ?conjecture3 . 
  ?conjecture3 targ:beliefStatus ?b3 .
} 


# Second step: Tabulate





# Third step: compute a score

Select ?b1num ?b2num ?b3num ?cmap
where 
{
  ?medproc :hasOutcome ?outcome . 
  ?medproc :hasConjecture ?conjecture1 .
  ?conjecture1 targ:beliefStatus ?b1 .
  ?designelem :triggersProcess ?medproc . 
  ?designelem :hasConjecture ?conjecture2 .  
  ?conjecture2 targ:beliefStatus ?b2 .
  ?cmap :hasDesignElement ?designelem . 
  ?cmap :hasConjecture ?conjecture3 . 
  ?conjecture3 targ:beliefStatus ?b3 .
 BIND (IF(?b1 = "fully-supported", 3, (IF(?b1 = "partially-supported", 2, 1))) As ?b1num ) 
 BIND (IF(?b2 = "fully-supported", 3, (IF(?b2 = "partially-supported", 2, 1))) As ?b2num )
 BIND (IF(?b3 = "fully-supported", 3, (IF(?b3 = "partially-supported", 2, 1))) As ?b3num )
 } 
ORDER BY ?cmap

 







